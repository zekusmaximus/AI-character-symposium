// This is a Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Project {
  id          String      @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  characters  Character[]
  timelines   Timeline[]
  notes       Note[]
}

model Character {
  id             String           @id @default(uuid())
  name           String
  description    String?
  traits         String?
  values         String?
  voicePatterns  String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  projectId      String
  project        Project          @relation(fields: [projectId], references: [id])
  conversations  Conversation[]
  memories       CharacterMemory[]
  relationships  Relationship[]   @relation("CharacterToRelationship")
  relatedTo      Relationship[]   @relation("RelatedCharacter")

  @@index([name])
  @@index([projectId])
}

model CharacterMemory {
  id          String    @id @default(uuid())
  content     String
  type        String    // episodic, semantic, emotional
  importance  Int       @default(1)
  embedding   String?   // JSON string of vector embedding
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  characterId String
  character   Character @relation(fields: [characterId], references: [id])
}

model Conversation {
  id          String    @id @default(uuid())
  title       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  characterId String
  character   Character @relation(fields: [characterId], references: [id])
  messages    Message[]
}

model Message {
  id             String       @id @default(uuid())
  content        String
  role           String       // user, character
  createdAt      DateTime     @default(now())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model Timeline {
  id          String          @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  projectId   String
  project     Project         @relation(fields: [projectId], references: [id])
  events      TimelineEvent[]
}

model TimelineEvent {
  id                  Int      @id @default(autoincrement())
  date                DateTime
  description         String
  charactersInvolved  String // Changed from String[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  timelineId          String
  timeline            Timeline @relation(fields: [timelineId], references: [id], onDelete: Cascade)
}

model Relationship {
  id              String    @id @default(uuid())
  type            String    // friend, enemy, family, etc.
  description     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  characterId     String
  character       Character @relation("CharacterToRelationship", fields: [characterId], references: [id])
  relatedCharId   String
  relatedCharacter Character @relation("RelatedCharacter", fields: [relatedCharId], references: [id])
}

model Note {
  id          String   @id @default(uuid())
  title       String
  content     String
  tags        String?  // Comma-separated tags
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
}
